---
description: 
globs: 
alwaysApply: true
---
## API Implementation Guidelines

These guidelines are applicable to all applications within the `apps/` directory (e.g., `apps/back-office`, `apps/front-office`) that implement server-side API routes using Next.js Route Handlers.

### 1. File Structure and Naming Conventions

*   **Path:** API routes should be located within the `src/app/api/` directory of the respective application.
    *   Example: `apps/back-office/src/app/api/` or `apps/front-office/src/app/api/`
*   **Feature-Based Grouping:** Group related API endpoints within a subdirectory named after the feature or resource they manage.
    *   Example: `apps/back-office/src/app/api/products/` or `apps/front-office/src/app/api/user-profile/`
*   **Route Handler File:** Inside the feature-specific directory, create a `route.ts` file. This file will contain the handlers for different HTTP methods (`GET`, `POST`, `PUT`, `DELETE`, etc.).
    *   Example: `apps/back-office/src/app/api/client/route.ts` or `apps/front-office/src/app/api/user-profile/route.ts`

### 2. Route Handler Implementation

*   **Import `NextRequest` and `NextResponse`:**
    ```typescript
    import { NextRequest, NextResponse } from "next/server";
    ```
*   **Export Asynchronous Functions:** Define and export `async` functions for each HTTP method you need to support. The function names must correspond to the HTTP methods in uppercase (e.g., `GET`, `POST`, `PUT`, `DELETE`).
    ```typescript
    export async function GET(request: NextRequest) {
      // ... implementation ...
    }

    export async function POST(request: NextRequest) {
      // ... implementation ...
    }

    export async function PUT(request: NextRequest) {
      // ... implementation ...
    }

    export async function DELETE(request: NextRequest) {
      // ... implementation ...
    }

    // etc.
    ```
*   **Request Handling:**
    *   The `request: NextRequest` parameter provides access to the incoming request details (e.g., URL parameters, body).
    *   **URL Search Parameters:** Access query parameters using `request.nextUrl.searchParams`.
        ```typescript
        const searchParams = request.nextUrl.searchParams;
        const id = searchParams.get("id"); // Get specific parameter
        const page = parseInt(searchParams.get("page") || "1", 10); // Provide default and parse
        const statusValues = searchParams.getAll("status"); // Handle array parameters (e.g., ?status=active&status=pending)
        const sortBy = searchParams.get("sortBy") ?? "createdAt"; 
        const sortOrder = (searchParams.get("sortOrder") ?? "desc").toLowerCase() === "asc" ? "asc" : "desc"; 
        ```
    *   **Request Body:** For `POST` and `PUT` requests, retrieve the JSON body using `await request.json()`.
        ```typescript
        const requestData = await request.json();
        ```
*   **Response Handling:**
    *   Use `NextResponse.json()` to send JSON responses.
    *   **Success:**
        ```typescript
        return NextResponse.json({ data: items, pagination: { ... } }); // GET list
        return NextResponse.json(item); // GET single
        return NextResponse.json(createdResource, { status: 201 }); // POST
        return NextResponse.json({ message: "Resource updated successfully", resource: updatedResource }); // PUT
        return NextResponse.json({ message: "Resource deleted/deactivated successfully" }); // DELETE
        ```
    *   **Error:**
        ```typescript
        return NextResponse.json({ error: "Resource not found" }, { status: 404 });
        return NextResponse.json({ error: "Invalid input", details: "Field X is required" }, { status: 400 });
        return NextResponse.json({ error: "Failed to perform operation" }, { status: 500 });
        ```

### 3. CRUD Operations Examples

*   **`GET` (Retrieve):**
    *   **Retrieve all resources (with pagination and filtering):**
        ```typescript
        // In GET function
        const searchParams = request.nextUrl.searchParams;
        const page = parseInt(searchParams.get("page") || "1", 10);
        const limit = parseInt(searchParams.get("limit") || "20", 10);
        const skip = (page - 1) * limit;
        const status = searchParams.get("status");
        const searchTerm = searchParams.get("search");

        // Replace YourModel and YourModelWhereInput with your actual Prisma model and types
        let whereCondition: Prisma.YourModelWhereInput = {};
        if (status) {
          // Add status filter to whereCondition
        }
        if (searchTerm) {
          // Add search filter to whereCondition (e.g., search by name, email)
        }

        const resources = await prisma.yourModel.findMany({
          where: whereCondition,
          orderBy: { /* default sort field e.g., createdAt: "desc" */ },
          skip: skip,
          take: limit,
          include: { /* related models if needed */ },
        });

        const totalResources = await prisma.yourModel.count({ where: whereCondition });

        return NextResponse.json({
          data: resources,
          pagination: {
            page,
            limit,
            total: totalResources,
            totalPages: Math.ceil(totalResources / limit),
          },
        });
        ```
    *   **Retrieve a specific resource by ID:**
        ```typescript
        // In GET function, after checking for an 'id' parameter
        const id = searchParams.get("id");
        if (id) {
          // Replace YourModel with your actual Prisma model
          const resource = await prisma.yourModel.findUnique({
            where: { id },
            include: { /* related models if needed */ },
          });

          if (!resource) {
            return NextResponse.json({ error: "Resource not found" }, { status: 404 });
          }
          return NextResponse.json(resource);
        }
        ```
*   **`POST` (Create):**
    ```typescript
    // In POST function
    const requestData = await request.json();
    // Validate requestData here (e.g., using Zod or manual checks)

    // Example: Creating a single resource
    // Replace YourModel with your actual Prisma model
    const newResource = await prisma.yourModel.create({
      data: {
        // ... map requestData fields to your model fields ...
        // Example:
        // name: requestData.name,
        // email: requestData.email,
        // id: uuidv4(), // if you're generating client-side UUIDs for non-autoincrement PKs
      },
    });

    return NextResponse.json(newResource, { status: 201 });
    ```
    *   For creating multiple resources or resources with relations in a single transaction, use `prisma.$transaction()`. Refer to existing implementations like `apps/back-office/src/app/api/client/route.ts` for detailed examples.
*   **`PUT` (Update):**
    ```typescript
    // In PUT function
    const searchParams = request.nextUrl.searchParams;
    const id = searchParams.get("id"); // Typically update by ID from URL param or body

    if (!id) {
      // Or get id from requestData if passed in body
      // const { id } = await request.json();
      return NextResponse.json({ error: "Resource ID is required for update" }, { status: 400 });
    }

    const requestData = await request.json();
    // Validate requestData

    // Replace YourModel with your actual Prisma model
    const updatedResource = await prisma.yourModel.update({
      where: { id },
      data: {
        // ... map requestData fields to your model fields for update ...
      },
    });

    return NextResponse.json({ message: "Resource updated successfully", resource: updatedResource });
    ```
*   **`DELETE` (Delete/Deactivate):**
    *   Prioritize deactivation (soft delete) over hard deletion if data retention or recovery is important.
    ```typescript
    // In DELETE function
    const searchParams = request.nextUrl.searchParams;
    const id = searchParams.get("id"); // Typically delete by ID from URL param

    if (!id) {
      return NextResponse.json({ error: "Resource ID is required" }, { status: 400 });
    }

    // Replace YourModel with your actual Prisma model
    const existingResource = await prisma.yourModel.findUnique({ where: { id } });
    if (!existingResource) {
      return NextResponse.json({ error: "Resource not found" }, { status: 404 });
    }

    // Option 1: Deactivate (Soft Delete)
    // Assumes an 'is_active' or similar field in your model
    const deactivatedResource = await prisma.yourModel.update({
      where: { id },
      data: { is_active: false },
    });
    return NextResponse.json({ message: "Resource deactivated successfully", resource: deactivatedResource });

    // Option 2: Hard Delete (Use with caution)
    // await prisma.yourModel.delete({ where: { id } });
    // return NextResponse.json({ message: "Resource deleted successfully" });
    ```

### 4. Error Handling

*   **Use `try...catch` blocks:** Wrap your main logic in `try...catch` blocks.
*   **Type Error Correctly:** Catch errors as `unknown` and then perform type narrowing.
    ```typescript
    try {
      // ... API logic ...
    } catch (error: unknown) {
      // Use the shared logger, imported as `logger`
      const errorMessage = error?.message || String(error);
        logger.error(`Operation failed in API route: ${errorMessage}`);
        or 
        logger.error(`Operation failed in API route: ${error?.message || error}`);

    }
    ```
*   **Specific Error Status Codes:** Return appropriate HTTP status codes (examples above).

### 5. Logging

*   **Use the shared logger:** Import and use the `@mcw/logger`.
    ```typescript
    import { logger } from "@mcw/logger";
    // Potentially: import { config as loggerConfig } from "@mcw/logger"; // To set log level programmatically if needed
    ```
*   **Log important events and errors:**
    *   Log the start/end of significant operations, or key decision points.
        ```typescript
        logger.info("Processing POST request for /api/feature-x", { requestBodyPreview: requestData }); // Be careful with logging full requestData if it contains PII
        ```
    *   Log errors with context (see Error Handling section).
    *   Avoid logging sensitive information (PII, secrets) directly. If necessary, ensure it is masked or tokenized.
*   **Log Level Configuration:** Adhere to the project's global log level configuration. Avoid setting log levels per-file unless for specific debugging scenarios, and revert it afterwards.

### 6. Database Interaction

*   **Use Prisma Client:** Import and use the shared Prisma client from `@mcw/database`.
    ```typescript
    import { prisma } from "@mcw/database";
    import { Prisma } from "@prisma/client"; // For Prisma-specific types (e.g., YourModelWhereInput)
    ```
*   **Type Safety:** Use Prisma-generated types for query inputs (e.g., `Prisma.YourModelWhereInput`) and results.
*   **Transactions:** For operations involving multiple database writes that must succeed or fail together, use `prisma.$transaction()`.
    ```typescript
    const result = await prisma.$transaction(async (transactionPrisma) => {
      // All operations within this callback run in a transaction.
      // Use `transactionPrisma` (the passed Prisma client instance) instead of the global `prisma` for these operations.
      const record1 = await transactionPrisma.modelA.create(...);
      const record2 = await transactionPrisma.modelB.update(...);
      return { record1, record2 };
    });
    ```
*   **Includes & Selects:** Use `include` to fetch related data and `select` to fetch specific fields to avoid over-fetching or under-fetching data, thereby optimizing queries.

### 7. Input Validation

*   **Perform thorough input validation:** Before processing request data or parameters, validate them to ensure they meet the expected format, type, and constraints.
*   **Use a validation library (Recommended):** Libraries like Zod are highly recommended for robust validation and clear error messages. This is preferred over manual checks for new implementations.
    ```typescript
    // Example with Zod (Illustrative - ensure Zod is a project dependency)
    // import { z } from 'zod';

    // const MySchema = z.object({
    //   name: z.string().min(1),
    //   email: z.string().email(),
    // });

    // try {
    //   const validatedData = MySchema.parse(requestData);
    //   // Proceed with validatedData
    // } catch (validationError) {
    //   if (validationError instanceof z.ZodError) {
    //     return NextResponse.json({ error: "Invalid input", details: validationError.errors }, { status: 400 });
    //   }
    //   // Handle other errors
    // }
    ```
*   **Manual Checks (if not using a library):**
    ```typescript
    if (!requestData.requiredField) {
      return NextResponse.json({ error: "requiredField is missing" }, { status: 400 });
    }
    ```

### 8. Security and Authorization

*   **Authentication:** Rely on NextAuth.js middleware for route protection. API routes should generally be protected unless explicitly public.
*   **Authorization:**
    *   After authentication, verify that the authenticated user has the necessary permissions for the requested operation or resource.
    *   Fetch user/session information (e.g., using `getServerSession` or a utility like `getClinicianInfo` if applicable to the app context) to get roles or IDs.
    *   Filter database queries based on user roles/permissions. For example, a user might only be able to access their own data, or data related to their organization.
        ```typescript
        // Example: Fetching user session and filtering data
        // import { getServerSession } from "next-auth/next"
        // import { authOptions } from "@/app/api/auth/[...nextauth]/route"; // Adjust path to your auth options

        // const session = await getServerSession(authOptions);
        // if (!session || !session.user) {
        //   return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
        // }
        // const userId = session.user.id; // Or other relevant identifier

        // const resources = await prisma.yourModel.findMany({
        //   where: {
        //     // ... other filters ...
        //     userId: userId, // Filter by user ID
        //   },
        // });
        ```

### 9. Helper Utilities

*   Utilize or create helper functions in a shared `utils` directory (e.g., `apps/your-app/src/utils/helpers.ts` or a shared package if common across apps) for tasks like:
    *   Fetching user/session context (if more complex than direct `getServerSession`).
    *   Common data transformations.
    *   Complex business logic that doesn't fit directly into the route handler.

### 10. General Principles from Project Guidelines

*   **KISS & YAGNI:** Implement only what's needed.
*   **Single Responsibility:** Keep handlers focused. Extract complex logic.
*   **Descriptive Naming:** Use clear names.
*   **Type Safety (Avoid `any`):** Strictly adhere to TypeScript best practices, especially `catch (error: unknown)`.
*   **Code Consistency:** Refer to existing well-structured API routes as a template.

By following these generalized guidelines, developers can create consistent, maintainable, and robust API routes across different applications in the monorepo. Always ensure thorough testing of API endpoints.




