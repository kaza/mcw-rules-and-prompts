---
description: 
globs: 
alwaysApply: true
---
# Testing Guidelines for MCW Practice Management Software

This document provides comprehensive guidelines for writing tests in the MCW Practice Management Software codebase. Following these guidelines ensures consistency, quality, and maintainability of tests.

## Table of Contents

1. [Test Types](mdc:#test-types)
2. [File Structure and Naming](mdc:#file-structure-and-naming)
3. [Test Setup and Teardown](mdc:#test-setup-and-teardown)
4. [Mock Data and Factories](mdc:#mock-data-and-factories)
5. [API Route Testing](mdc:#api-route-testing)
6. [Utility Function Testing](mdc:#utility-function-testing)
7. [Error Handling Testing](mdc:#error-handling-testing)
8. [Testing with Authentication](mdc:#testing-with-authentication)
9. [Best Practices](mdc:#best-practices)

## Test Types

### Unit Tests

Unit tests focus on testing individual functions or methods in isolation, with all dependencies mocked.

- **File Extension**: `.unit.test.ts`
- **Purpose**: Verify that a specific piece of code works as expected in isolation.
- **Mocking**: Mock all external dependencies (database, other modules, etc.).
- **Coverage**: Test all code paths, including error cases.
- **Example**: `apps/back-office/__tests__/api/location/route.unit.test.ts`

- Keep running `npx vitest apps/back-office/__tests__/api/**test-path**` in a loop **until all test cases pass without any failure**. Exit only when the test result is fully green (i.e., no failing or pending tests).

### Integration Tests

Integration tests verify that different components work together correctly, often involving the database.

- **File Extension**: `.integration.test.ts`
- **Purpose**: Verify that components interact correctly with each other and external systems like the database.
- **Database**: Use the actual database with proper setup and teardown.
- **Example**: `apps/back-office/__tests__/api/location/route.integration.test.ts`

## File Structure and Naming

- Place tests in the `apps/<app-name>/__tests__` directory, mirroring the structure of the `src` directory.
- Test filenames should match the file they are testing with a `.unit.test.ts` or `.integration.test.ts` suffix.
- use `import { createRequestWithBody, createRequest } from "@mcw/utils"` to create request
- import api routes as `@/api/**/route"`

- For example:
  - `src/app/api/product/route.ts` → `__tests__/api/product/route.unit.test.ts`
  - `src/app/api/product/route.ts` → `__tests__/api/product/route.integration.test.ts`

## Test Setup and Teardown

### Unit Tests

```typescript
import { vi } from "vitest";
import { describe, it, expect, beforeEach } from "vitest";
import prismaMock from "@mcw/database/mock";

describe("Feature Name Unit Tests", () => {
  beforeEach(() => {
    // Reset all mocks before each test
    vi.resetAllMocks();
  });

  // Tests go here
});
```

### Integration Tests

```typescript
import { describe, it, expect, afterEach, beforeEach } from "vitest";
import { prisma } from "@mcw/database";

describe("Feature Name Integration Tests", () => {
  // Store IDs of created entities for cleanup
  let createdEntityIds: string[] = [];

  // Clean up after each test to ensure isolation
  afterEach(async () => {
    // Clean up created entities
    if (createdEntityIds.length > 0) {
      await prisma.entity.deleteMany({
        where: { id: { in: createdEntityIds } }
      });
      createdEntityIds = [];
    }
  });

  // Optionally clean up all data before each test
  beforeEach(async () => {
    await prisma.entity.deleteMany({});
  });

  // Tests go here
});
```

## Mock Data and Factories

### Unit Tests

Use factory functions or the `mock` methods directly:

```typescript
// Simple mock factory function
const mockEntity = (overrides = {}) => ({
  id: "test-id",
  name: "Test Entity",
  is_active: true,
  created_at: new Date(),
  // Add all required fields
  ...overrides,
});

// Or use existing factories
import { ProductFactory } from "@mcw/database/mock-data";
const product = ProductFactory.build();
```

### Integration Tests

Use Prisma factories to create real entities in the database:

```typescript
import { ProductPrismaFactory } from "@mcw/database/mock-data";

// Create a real entity in the database
const product = await ProductPrismaFactory.create();
createdEntityIds.push(product.id); // Store ID for cleanup
```

## API Route Testing

### Common Imports for API Tests

```typescript
// Unit Tests
import { createRequest, createRequestWithBody } from "@mcw/utils";
import { GET, POST, PUT, DELETE } from "@/api/your-feature/route";
import prismaMock from "@mcw/database/mock";

// Integration Tests
import { createRequest, createRequestWithBody } from "@mcw/utils";
import { prisma } from "@mcw/database";
import { GET, POST, PUT, DELETE } from "@/api/your-feature/route";
```

### Testing HTTP Methods

#### GET Requests

```typescript
// Unit Test Example
it("GET /api/entity should return all entities", async () => {
  const entities = [mockEntity({ id: "1" }), mockEntity({ id: "2" })];
  prismaMock.entity.findMany.mockResolvedValueOnce(entities);

  const response = await GET();
  
  expect(response.status).toBe(200);
  const json = await response.json();
  expect(json).toHaveLength(entities.length);
  expect(json[0]).toHaveProperty("id", entities[0].id);
  
  expect(prismaMock.entity.findMany).toHaveBeenCalledWith({});
});

// Integration Test Example
it("GET /api/entity should return all entities", async () => {
  // Create test entities in database
  const entity1 = await EntityPrismaFactory.create();
  const entity2 = await EntityPrismaFactory.create();
  createdEntityIds.push(entity1.id, entity2.id);

  const response = await GET();
  
  expect(response.status).toBe(200);
  const json = await response.json();
  expect(json.length).toBeGreaterThanOrEqual(2);
  
  // Verify entities are in response
  const foundEntities = json.filter(e => 
    e.id === entity1.id || e.id === entity2.id
  );
  expect(foundEntities).toHaveLength(2);
});
```

#### POST Requests

```typescript
// Unit Test Example
it("POST /api/entity should create a new entity", async () => {
  const newEntity = mockEntity();
  prismaMock.entity.create.mockResolvedValueOnce(newEntity);

  const entityData = {
    name: "Test Entity",
    // Include required fields
  };

  const req = createRequestWithBody("/api/entity", entityData);
  const response = await POST(req);

  expect(response.status).toBe(201);
  const json = await response.json();
  expect(json).toHaveProperty("name", entityData.name);
  
  expect(prismaMock.entity.create).toHaveBeenCalledWith({
    data: entityData
  });
});

// Integration Test Example
it("POST /api/entity should create a new entity", async () => {
  const entityData = {
    name: "Test Entity",
    // Include required fields
  };

  const req = createRequestWithBody("/api/entity", entityData);
  const response = await POST(req);

  expect(response.status).toBe(201);
  const json = await response.json();
  expect(json).toHaveProperty("name", entityData.name);
  
  // Store ID for cleanup
  createdEntityIds.push(json.id);
  
  // Verify entity was created in database
  const createdEntity = await prisma.entity.findUnique({
    where: { id: json.id }
  });
  expect(createdEntity).not.toBeNull();
  expect(createdEntity).toHaveProperty("name", entityData.name);
});
```

#### PUT Requests

```typescript
// Unit Test Example
it("PUT /api/entity should update an existing entity", async () => {
  const existingEntity = mockEntity();
  const updatedEntity = mockEntity({ name: "Updated Entity" });

  prismaMock.entity.findUnique.mockResolvedValueOnce(existingEntity);
  prismaMock.entity.update.mockResolvedValueOnce(updatedEntity);

  const updateData = {
    id: existingEntity.id,
    name: "Updated Entity",
    // Include required fields
  };

  const req = createRequestWithBody("/api/entity", updateData, { method: "PUT" });
  const response = await PUT(req);

  expect(response.status).toBe(200);
  const json = await response.json();
  expect(json).toHaveProperty("name", "Updated Entity");
  
  expect(prismaMock.entity.update).toHaveBeenCalledWith({
    where: { id: existingEntity.id },
    data: expect.objectContaining({ name: "Updated Entity" })
  });
});

// Integration Test Example
it("PUT /api/entity should update an existing entity", async () => {
  // Create entity to update
  const entity = await EntityPrismaFactory.create();
  createdEntityIds.push(entity.id);

  const updateData = {
    id: entity.id,
    name: "Updated Entity",
    // Include required fields
  };

  const req = createRequestWithBody("/api/entity", updateData, { method: "PUT" });
  const response = await PUT(req);

  expect(response.status).toBe(200);
  const json = await response.json();
  expect(json).toHaveProperty("name", "Updated Entity");
  
  // Verify entity was updated in database
  const updatedEntity = await prisma.entity.findUnique({
    where: { id: entity.id }
  });
  expect(updatedEntity).toHaveProperty("name", "Updated Entity");
});
```

#### DELETE Requests

```typescript
// Unit Test Example
it("DELETE /api/entity/?id=<id> should delete an entity", async () => {
  const entity = mockEntity();
  
  prismaMock.entity.findUnique.mockResolvedValueOnce(entity);
  prismaMock.entity.delete.mockResolvedValueOnce(entity);
  // Or for soft delete:
  // prismaMock.entity.update.mockResolvedValueOnce({ ...entity, is_active: false });

  const req = createRequest(`/api/entity/?id=${entity.id}`, { method: "DELETE" });
  const response = await DELETE(req);

  expect(response.status).toBe(200);
  const json = await response.json();
  expect(json).toHaveProperty("success", true);
  // Or for soft delete:
  // expect(json.entity).toHaveProperty("is_active", false);
  
  expect(prismaMock.entity.delete).toHaveBeenCalledWith({
    where: { id: entity.id }
  });
  // Or for soft delete:
  // expect(prismaMock.entity.update).toHaveBeenCalledWith({
  //   where: { id: entity.id },
  //   data: { is_active: false }
  // });
});

// Integration Test Example
it("DELETE /api/entity/?id=<id> should delete an entity", async () => {
  // Create entity to delete
  const entity = await EntityPrismaFactory.create();
  
  const req = createRequest(`/api/entity/?id=${entity.id}`, { method: "DELETE" });
  const response = await DELETE(req);

  expect(response.status).toBe(200);
  const json = await response.json();
  expect(json).toHaveProperty("success", true);
  
  // Verify entity was deleted from database
  const deletedEntity = await prisma.entity.findUnique({
    where: { id: entity.id }
  });
  expect(deletedEntity).toBeNull();
  // Or for soft delete:
  // expect(deletedEntity).toHaveProperty("is_active", false);
});
```

## Utility Function Testing

```typescript
import { describe, it, expect, beforeEach } from "vitest";
import { prisma } from "@mcw/database";
import { yourUtilityFunction } from "@/utils/index";

describe("Utility Function Tests", () => {
  beforeEach(async () => {
    // Clean up any data created by previous tests
    await prisma.relevantTable.deleteMany();
  });

  it("should perform expected action", async () => {
    // Arrange: set up test data
    const testData = { /* test data */ };
    
    // Act: call the function being tested
    const result = await yourUtilityFunction(testData);
    
    // Assert: verify the function worked as expected
    expect(result).toBeDefined();
    expect(result).toHaveProperty("expectedProperty", "expectedValue");
    
    // Verify database changes if applicable
    const dbRecord = await prisma.relevantTable.findFirst({
      where: { /* query to find the record */ }
    });
    expect(dbRecord).toHaveProperty("expectedProperty", "expectedValue");
  });

  it("should handle errors appropriately", async () => {
    // Test error handling
    const invalidData = { /* invalid data */ };
    
    await expect(yourUtilityFunction(invalidData)).rejects.toThrow();
    // Or for specific error messages:
    // await expect(yourUtilityFunction(invalidData)).rejects.toThrow("Expected error message");
  });
});
```

## Error Handling Testing

For all API endpoints, test common error cases:

```typescript
// Missing required fields
it("should return 400 if required fields are missing", async () => {
  const incompleteData = {
    // Missing required fields
  };

  const req = createRequestWithBody("/api/entity", incompleteData);
  const response = await POST(req);

  expect(response.status).toBe(400);
  const json = await response.json();
  expect(json).toHaveProperty("error");
});

// Entity not found
it("should return 404 for non-existent entity", async () => {
  const req = createRequest("/api/entity/?id=non-existent-id", { method: "DELETE" });
  const response = await DELETE(req);

  expect(response.status).toBe(404);
  const json = await response.json();
  expect(json).toHaveProperty("error", "Entity not found");
});

// Invalid input validation
it("should return 422 for invalid payload", async () => {
  const invalidData = { 
    name: "", // Invalid empty name
    count: -1 // Invalid negative count
  };

  const req = createRequestWithBody("/api/entity", invalidData);
  const response = await POST(req);

  expect(response.status).toBe(422);
  const json = await response.json();
  expect(json).toHaveProperty("error");
  expect(json).toHaveProperty("details"); // Validation details
});
```

## Testing with Authentication

When your routes require authentication, mock the auth session:

```typescript
import { vi } from "vitest";

// Mock the authentication provider/function
vi.mock("@/utils/helpers", () => ({
  getBackOfficeSession: vi.fn(() =>
    Promise.resolve({
      user: {
        id: "test-user-id",
        // Add other user properties as needed
      },
    }),
  ),
}));

// In your tests, you can now call authenticated endpoints normally
// The mock will provide the authentication context
```

## Best Practices

### Data Type Handling

When testing API responses, remember that certain data types are serialized:

```typescript
// Dates are serialized to ISO strings
expect(json.createdAt).toBe(entity.createdAt.toISOString());

// Decimal values are serialized to strings
expect(json.price).toBe(entity.price.toString());

// For a complete object, you can use a helper function
const serializeForComparison = (obj) => ({
  ...obj,
  createdAt: obj.createdAt.toISOString(),
  price: obj.price.toString(),
  // Add other field transformations as needed
});

expect(json).toEqual(serializeForComparison(entity));
```

### Test Isolation

Ensure tests are isolated and don't affect each other:

- Use `beforeEach` and `afterEach` hooks to set up and tear down test data
- Clean up all created entities after each test
- Reset all mocks before each test with `vi.resetAllMocks()`

### Readable Test Names

Write descriptive test names that clearly state what is being tested:

```typescript
// Good: Clear HTTP method, endpoint, and expected behavior
it("GET /api/entity should return all active entities", async () => {});
it("POST /api/entity should create a new entity and return 201", async () => {});
it("PUT /api/entity should return 404 when entity doesn't exist", async () => {});
```

### Avoid Test Duplication

Reuse test data and setup code when possible:

```typescript
// Helper function for creating test data
const createTestEntity = async () => {
  const entity = await EntityPrismaFactory.create();
  createdEntityIds.push(entity.id);
  return entity;
};

// Helper function for asserting entity properties
const assertEntityProperties = (entity, expected) => {
  expect(entity).toHaveProperty("name", expected.name);
  expect(entity).toHaveProperty("is_active", expected.is_active);
  // Add other property assertions
};
```

### Prisma Mock Usage

When using `prismaMock`, be explicit about what you're testing:

```typescript
// Verify mock was called with correct parameters
expect(prismaMock.entity.create).toHaveBeenCalledWith({
  data: expect.objectContaining({
    name: "Test Entity",
    is_active: true,
  }),
});

// Verify mock was not called when it shouldn't be
expect(prismaMock.entity.delete).not.toHaveBeenCalled();
```

### Type Safety in Tests

Maintain type safety in your tests:

```typescript
// Import types
import type { Entity } from "@mcw/database";

// Use proper typing for mock data
const mockEntity = (overrides: Partial<Entity> = {}): Entity => ({
  id: "test-id",
  name: "Test Entity",
  is_active: true,
  created_at: new Date(),
  // Add all required fields
  ...overrides,
});

// Type your test data
const entityData: Pick<Entity, "name" | "is_active"> = {
  name: "Test Entity",
  is_active: true,
};
```

### Database Mocking vs. Real Database

- **Unit Tests**: Always use `prismaMock` from `@mcw/database/mock`
- **Integration Tests**: Always use the real `prisma` client from `@mcw/database`

### Handling Request Objects

Use the helper functions for creating request objects:

```typescript
// For GET or DELETE requests with query parameters
const req = createRequest(`/api/entity/?id=${id}`, { method: "DELETE" });

// For POST or PUT requests with a body
const req = createRequestWithBody("/api/entity", data, { method: "PUT" });
```

### Verifying Side Effects

In integration tests, always verify that the database was updated correctly:

```typescript
// After creating an entity
const createdEntity = await prisma.entity.findUnique({
  where: { id: responseJson.id }
});
expect(createdEntity).not.toBeNull();
expect(createdEntity).toHaveProperty("name", entityData.name);

// After updating an entity
const updatedEntity = await prisma.entity.findUnique({
  where: { id: entity.id }
});
expect(updatedEntity).toHaveProperty("name", "Updated Name");

// After deleting an entity
const deletedEntity = await prisma.entity.findUnique({
  where: { id: entity.id }
});
expect(deletedEntity).toBeNull();
```

### Testing Response Structure

Verify the structure of API responses:

```typescript
// For GET requests returning arrays
expect(Array.isArray(json)).toBe(true);
expect(json).toHaveLength(2);
expect(json[0]).toHaveProperty("id");
expect(json[0]).toHaveProperty("name");

// For POST/PUT requests returning objects
expect(json).toHaveProperty("id");
expect(json).toHaveProperty("name", entityData.name);

// For DELETE requests
expect(json).toHaveProperty("success", true);
// or
expect(json).toHaveProperty("message", "Entity deleted successfully");
```

### Clean Code in Tests

Tests should be clean and maintainable:

- Use consistent formatting
- Group related tests together with descriptive `describe` blocks
- Split long tests into smaller, focused tests
- Comment complex test setup or assertions
- Use helper functions for repeated code

### Test File Length

- **Keep Test Files Concise**: Aim to keep test files under 600 lines of code. Large test files can become difficult to navigate and maintain.
- **Strategies for Long Files**: If a test file is approaching or exceeding this limit, consider the following strategies:
    - **Split by Feature Subset**: If a single route handler or module has many distinct features or sub-features, consider splitting the tests into multiple files, each focused on a subset of those features (e.g., `feature.validation.unit.test.ts`, `feature.core-logic.unit.test.ts`).
    - **Separate Unit and Integration Aspects**: If a test file mixes very granular unit tests with more integrated tests (even if all are `.unit.test.ts` by convention due to mocking databases), consider if some of the more integrated scenarios could be grouped into a separate file.
    - **Refactor Helper Utilities**: Complex setup or assertion logic can sometimes be extracted into shared helper functions, potentially reducing line count in the test file itself. However, ensure helpers don't obscure the test's intent.

### Unit and Integration Tests Additional Guidelines

- **Unit Tests (`.unit.test.ts`)**:
  - Focus on testing the logic within a single file/module in isolation.
  - **Mock Dependencies**: Use Vitest's mocking capabilities (`vi.mock`) to isolate the unit under test.
  - **Database Mocking**: For database interactions, use the shared Prisma mock setup: `import prismaMock from "@mcw/database/mock";`. Use `prismaMock.<model>.<method>.mockResolvedValueOnce(...)` or `.mockRejectedValueOnce(...)` to simulate database responses.
  - **Factory Usage**: Use mock factories defined in `@mcw/database/src/__mocks__/data.ts` for creating test data if needed, BUT prefer defining simple mock objects directly within the test file for clarity if the structure is simple, similar to the `location` unit test.
  - **Path Aliases**: When importing the module under test (e.g., an API route handler), use the `@/` alias which maps to the application's `src` directory (e.g., `import { GET } from "@/app/api/products/route";` for a route located in `src/app/api/products/`).
  - **Avoid explicitly mocking `@mcw/logger` or `next/server` (`NextResponse`)**. Rely on the `prismaMock` and use the actual `NextResponse` returned by the route handler.
  - Use `vi.resetAllMocks()` in `beforeEach` hooks.

- **Integration Tests (`.integration.test.ts`)**:
  - Test the interaction between multiple modules, including database interactions.
  - **Database Interaction**: Use the real Prisma client (`import { prisma } from "@mcw/database";`).
  - **Data Setup/Teardown**: Use `beforeEach` and `afterEach` hooks with the Prisma client to set up necessary data (`prisma.<model>.create()`) and clean up (`prisma.<model>.deleteMany({})`) to ensure tests are isolated.
  - **Database State**: For integration tests that modify the database, use `beforeEach` and `afterEach` to clean up and ensure tests are isolated.
  - **Factory Usage**: Generate mock data objects using the factories exported from `@mcw/database/mock-data` (e.g., `import { ProductFactory } from "@mcw/database/mock-data";`). Use the generated object with `prisma.<model>.create({ data: ... })` to insert it into the database. (Using the auto-generated Prisma factories from `@quramy/prisma-fabbrica` has proven difficult due to path resolution issues in tests).
  - **Path Aliases**: Use the `@/` alias for importing application API route handlers. This alias maps to `src/app`, so the import path will look like `import { GET } from "@/api/your-feature/route";`. For importing database utilities, use the `@mcw/database` alias (e.g., `@mcw/database/mock-data`).

- **Test Structure**: Organize API route tests into separate describe blocks for each HTTP method (GET, POST, PUT, DELETE), with clear test cases covering successful operations and error conditions.

### Dealing with JSON Serialization

When asserting against `response.json()`, account for JSON serialization. Types like `Date` and `Decimal` will be converted to strings. Compare against expected data that has been similarly serialized:

```typescript
// Example assertion for an array of objects with Date and Decimal
const responseData = await response.json();
const expectedSerializedData = mockDataArray.map(item => ({
  ...item,
  createdAt: item.createdAt.toISOString(), // Serialize Date
  price: item.price.toString(),         // Serialize Decimal
}));
expect(responseData).toEqual(expectedSerializedData);
```




