---
description: Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices.
globs: **/*
alwaysApply: true
---
# Self-Improvement Rules

## Connection with Memory System

The self-improvement process works in tandem with the memory system (`learned-memories.mdc`):

1. **Memory â†’ Rules Pipeline:**
   - Monitor `learned-memories.mdc` for recurring patterns
   - When a memory entry is referenced/used 3+ times, consider creating a formal rule
   - High-impact technical decisions in memory should become architectural rules
   - Failed approaches in memory should become "anti-pattern" rules

2. **Promotion Criteria (Memory to Rule):**
   - The learning has been validated across multiple implementations
   - It represents a consistent pattern or principle
   - It would benefit the team to have it as a formal guideline
   - It's mature enough to be standardized (not still evolving)

3. **Memory Review During Rule Updates:**
   - Before creating new rules, check if related learnings exist in memory
   - Use memory entries as source material for rule examples
   - Reference specific memory entries that led to rule creation
   - Archive promoted memory entries with a note about the new rule

- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase
  - **Patterns identified in `learned-memories.mdc` that have proven valuable multiple times**

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```typescript
  // If you see repeated patterns like:
  const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
  });
  
  // Consider adding to [prisma.mdc](mdc:.cursor/rules/prisma.mdc):
  // - Standard select fields
  // - Common where conditions
  // - Performance optimization patterns
  ```

- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - Examples should come from actual code
  - References should be up to date
  - Patterns should be consistently enforced

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes
Follow [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc) for proper rule formatting and structure.
